@import 'functions'

class(prefix, attr, type, from=0, to=50, gap=5, important=false)
	for x in (from/gap)..(to/gap)
		// val = !isDecimal(x*gap) ?  x*gap: isDecimal(unit(percentage(x*gap),'')) ? unit(percentage(x*gap),'') * 100 : unit(percentage(x*gap),'')
		
		value = x*gap
		
		if isDecimal(value)
			val = unit(percentage(value),'')
			
		else
			if isDecimal(gap)
				val = value * 100
			else
				val = value
			
		.{prefix}{val}
			{attr} unit(gap*x, type) (important ? !important : null)

grid(size, type = 'flex', columns = $grid-columns)
					
	//Auto column
	if type == 'flex'
		.col
			-webkit-box-flex 1
			-ms-flex-positive 1
			flex-grow 1
			-ms-flex-preferred-size 0
			flex-basis 0
			max-width 100%
		
		.start-{size}
			-webkit-box-pack start
			-ms-flex-pack start
			justify-content flex-start
			text-align start

		.center-{size}
			-webkit-box-pack center
			-ms-flex-pack center
			justify-content center
			text-align center

		.end-{size}
			-webkit-box-pack end
			-ms-flex-pack end
			justify-content flex-end
			text-align end

		.top-{size}
			-webkit-box-align start
			-ms-flex-align start
			align-items flex-start

		.middle-{size}
			-webkit-box-align center
			-ms-flex-align center
			align-items center

		.bottom-{size}
			-webkit-box-align end
			-ms-flex-align end
			align-items flex-end

		.around-{size}
			-ms-flex-pack distribute
			justify-content space-around

		.between-{size}
			-webkit-box-pack justify
			-ms-flex-pack justify
			justify-content space-between

		.first-{size}
			-webkit-box-ordinal-group 0
			-ms-flex-order -1
			order -1

		.last-{size}
			-webkit-box-ordinal-group 2
			-ms-flex-order 1
			order 1
			
	// columns
	if type != 'fractions'
		for x in 1..columns
			$width = round((x/columns)*100, 8)
			.col-{size}-{x}
				if type == 'flex'
					-ms-flex-preferred-size unit($width, '%')
					flex-basis unit($width, '%')
					max-width unit($width,'%')
				else
					width unit($width, '%')
	
		//offsets
		max-offset = columns - 1
		for offset in 0..max-offset
			.col-{size}-offset-{offset}
				margin-left unit(round((offset/columns)*100, 8), '%')

		
		//push & pull
		for item in 0..columns
			
			.col-{size}-push-{item}
				left unit(round((item/columns)*100, 8), '%')
			
			.col-{size}-pull-{item}
				right unit(round((item/columns)*100, 8), '%')

	else
		for x in 1..columns
			for y in 1..x
				if y!=x
					$width= (y/x)*100
					.col-{size}-{y}{'\/'}{x}
						width unit($width,'%')
						for k in 1..x
							if x!=k
								$offset = (k/x) * 100
								&.col-{size}-offset-{k}
									margin-left unit($offset, '%')
								&.col-{size}-pull-{k}
									right unit($offset, '%')
								&.col-{size}-push-{k}
									left unit($offset, '%')

xs(max-width = true)
	if max-width
		@media only screen and (max-width: unit(breakpoint('xs', 'max'), px))
			{block}
	else
		@media only screen and (min-width: unit(breakpoint('xs', 'max') + 1, px))
			{block}

sm(min-width = true, max-width = true)
	if max-width && min-width
		@media only screen and (min-width: unit(breakpoint('sm', 'min'), px)) and (max-width: unit(breakpoint('sm', 'max'), px))
			{block}
	else
		if min-width
			@media only screen and (min-width: unit(breakpoint('sm', 'min'), px))
				{block}
		else
			@media only screen and (max-width: unit(breakpoint('sm', 'max'), px))
				{block}
			

md(min-width = true, max-width = true)
	if max-width && min-width
		@media only screen and (min-width: unit(breakpoint('md', 'min'), px)) and (max-width: unit(breakpoint('md', 'max'), px))
			{block}
	else
		if min-width
			@media only screen and (min-width: unit(breakpoint('md', 'min'), px))
				{block}
		else
			@media only screen and (max-width: unit(breakpoint('md', 'max'), px))
				{block}
			
lg(max-width = true)
	@media only screen and (min-width: unit(breakpoint('lg', 'min'), px))
		{block}

breakpoint(size, point)
	return $breakpoint[size][point] || 0

ifFlex()
	return $grid-system == 'flex'
	
hide()
	display none

show()
	display initial
